{
  "plugins": ["@typescript-eslint", "prettier", "simple-import-sort", "unused-imports"],
  "extends": [
    "airbnb",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "prettier",
    "plugin:prettier/recommended",
    "next"
  ],
  "parserOptions": {
    "project": "./tsconfig.json"
  },
  "globals": {
    "__DEV__": true
  },
  "rules": {
    "dot-notation": "off",
    "import/order": "off",
    "jsx-a11y/anchor-is-valid": "off",
    "jsx-a11y/label-has-associated-control": "off",
    "multiline-ternary": "off",
    "no-return-await": "off",
    "no-shadow": "off",
    "react/jsx-closing-tag-location": "off",
    "react/jsx-curly-brace-presence": "off",
    "react/jsx-filename-extension": [
      "error",
      {
        "extensions": [".jsx", ".tsx"]
      }
    ],
    "react/jsx-one-expression-per-line": "off",
    "react/jsx-props-no-spreading": "off",
    "react/jsx-wrap-multilines": "off",
    "unused-imports/no-unused-imports": "off",
    // Cannot use `Component.displayName` pattern on class components in TS.
    "react/static-property-placement": "off",
    "simple-import-sort/exports": "warn",
    "space-before-function-paren": "off",
    "no-else-return": "off",
    "react/no-array-index-key": "off",
    "import/newline-after-import": "off",
    "react/jsx-boolean-value": "off",
    "simple-import-sort/imports": "off",
    "import/prefer-default-export": "off",
    "@typescript-eslint/no-unused-var": "off",
    // Require or disallow a space immediately following the // or /* in a comment
    // https://eslint.org/docs/rules/spaced-comment
    "spaced-comment": [
      "error",
      "always",
      {
        "line": {
          "exceptions": ["-", "+"],
          "markers": ["=", "!", "#region", "#endregion", "/"] // space here to support sprockets directives and typescript reference comments
        },
        "block": {
          "exceptions": ["-", "+"],
          "markers": ["=", "!", "#region", "#endregion", ":", "::"],
          // space here to support sprockets directives and flow comment types
          "balanced": true
        }
      }
    ],
    "no-useless-return": "off",
    // "unused-imports/no-unused-imports": "error",
    "@typescript-eslint/indent": "off",
    "react/function-component-definition": "off",
    "react/no-unescaped-entities": "off",
    "react/jsx-no-useless-fragment": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/consistent-type-imports": "off",
    "@typescript-eslint/no-floating-promises": "off",
    "@typescript-eslint/no-shadow": "error",
    "@typescript-eslint/space-before-function-paren": "off"
  },
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [".js", ".mjs", ".jsx", ".ts", ".tsx", ".json"]
      },
      "typescript": {}
    },
    "import/extensions": [".js", ".mjs", ".jsx", ".ts", ".tsx"]
  },
  "overrides": [
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "parserOptions": {
        // typescript-eslint specific options
        "warnOnUnsupportedTypeScriptVersion": true
      },
      "rules": {
        // Allow unused variables that starts with, or is `_`
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": [
          "warn",
          {
            "vars": "all",
            "args": "after-used",
            "ignoreRestSiblings": true,
            "argsIgnorePattern": "^_",
            "varsIgnorePattern": "^_"
          }
        ],
        // Override the base rules so to not clash with each other.
        // https://github.com/typescript-eslint/typescript-eslint/issues/2540
        "no-use-before-define": "off",
        "@typescript-eslint/no-use-before-define": [
          "error",
          {
            "functions": true,
            "classes": true,
            "variables": true
          }
        ],
        // Allow `.ts` and `.tsx` extensions to be omitted
        "import/extensions": [
          "error",
          "ignorePackages",
          {
            "js": "never",
            "mjs": "never",
            "jsx": "never",
            "ts": "never",
            "tsx": "never"
          }
        ],
        // Extend this config for TypeScript files
        "import/no-extraneous-dependencies": [
          "error",
          {
            "devDependencies": [
              "test/**",
              // tape, common npm pattern
              "tests/**",
              // also common npm pattern
              "spec/**",
              // mocha, rspec-like pattern
              "**/jest.config.ts",
              // jest config
              "**/jest.setup.ts",
              // jest setup
              "**/__tests__/**",
              // jest pattern
              "**/__mocks__/**",
              // jest pattern
              "test.{ts,tsx}",
              // repos with a single test file
              "test-*.{ts,tsx}",
              // repos with multiple top-level test files
              "**/*{.,_}{test,spec}.{ts,tsx}"
              // tests where the extension or filename suffix denotes that it is a test
            ],
            "optionalDependencies": false
          }
        ],
        "camelcase": "warn",
        // No need to use prop types on TS files.
        "react/prop-types": "off",
        "@typescript-eslint/camelcase": "off",
        "@typescript-eslint/explicit-module-boundary-types": ["off"],
        "no-plusplus": ["error", { "allowForLoopAfterthoughts": true }]
      }
    },
    {
      "files": [".eslintrc.js", "*.config.js"],
      "parserOptions": {
        "sourceType": "script"
      },
      "env": {
        "node": true
      }
    }
  ],
  "ignorePatterns": ["next.config.js", "next-env.d.ts", ".eslint/rules/**", "**/__tests__/**"]
}
